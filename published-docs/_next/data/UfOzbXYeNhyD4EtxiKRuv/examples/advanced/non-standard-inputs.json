{"pageProps":{"sourceCode":"import React, { ChangeEvent } from \"react\";\nimport { useDumbForm, ValidationError, ValidationSchema } from \"react-dumb-form\";\n\n// UI for documentation only\nimport { Form } from \"react-bootstrap\";\nimport { FormGroupTitle } from \"ui/forms\";\nimport { FormTextInputCustom } from \"ui/forms/FormTextInputCustom\";\nimport Separator from \"ui/Separator\";\nimport { FormMultiSelect } from \"ui/forms/FormMultiSelect\";\n\n// FORM SETUP AND VALIDATION\n// --------------------------------------------------------------------------------\n\nconst defaultValues = {\n  controlledInput: \"\",\n  multiSelect: [] as string[],\n};\ntype Form = typeof defaultValues;\n\nconst validationSchema: ValidationSchema<Form> = {\n  validators: {\n    multiSelect: multiSelect => {\n      if (multiSelect.length < 2) throw new ValidationError(\"Please pick at least 2 options.\");\n    },\n  },\n};\n\n// Mock data (in a real-world scenario this should come from a backend API)\nconst OPTIONS = [\"Australia\", \"Canada\", \"USA\", \"Poland\", \"Spain\", \"France\"];\n\n// COMPONENT\n// --------------------------------------------------------------------------------\n\nexport function ExampleNonStandardInputs() {\n  const [data, setData] = React.useState<Form>(defaultValues);\n\n  const {\n    formProps,\n    names,\n    errorData: { errors },\n    setValues,\n  } = useDumbForm<Form>({\n    name: \"example-non-standard-inputs-form\",\n    defaultValues,\n    onSubmit: setData,\n    onChange: setData, // Used because of reset button\n    liveFields: [\"controlledInput\", \"multiSelect\"],\n    validationSchema,\n  });\n\n  const handleControlledInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setValues({ controlledInput: event.currentTarget.value });\n  };\n\n  const handleMultiSelectChange = (data: string[]) => {\n    setValues({ multiSelect: data });\n  };\n\n  return (\n    <form {...formProps}>\n      <FormGroupTitle>Controlled inputs</FormGroupTitle>\n      <Form.Text muted className=\"d-block mb-2\">\n        You can use controlled inputs by providing <code>value</code> and <code>onChange</code> handlers.\n      </Form.Text>\n      <FormTextInputCustom\n        label=\"This is a controlled input\"\n        onChange={handleControlledInputChange}\n        value={data.controlledInput}\n        error={errors.controlledInput}\n      />\n\n      <Separator dashed />\n\n      <FormGroupTitle>Fully custom fields</FormGroupTitle>\n      <Form.Text muted className=\"d-block mb-2\">\n        This example uses multi-select as a non-standard input, but it is really applicable for anything. As long as you\n        treat it as controlled.\n      </Form.Text>\n      <FormMultiSelect\n        options={OPTIONS}\n        requiredMark\n        label=\"Multi-select\"\n        onChange={handleMultiSelectChange}\n        name={names.multiSelect}\n        error={errors.multiSelect}\n      />\n    </form>\n  );\n}\n"},"__N_SSG":true}