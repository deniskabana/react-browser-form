{"pageProps":{"sourceCode":"import React from \"react\";\nimport { TransformationSchema, useDumbForm } from \"react-dumb-form\";\n\n// UI for documentation only\nimport { FormGroupTitle, FormTextInput } from \"ui/forms\";\nimport Separator from \"ui/Separator\";\n\nconst defaultValues = {\n  // Primitive types\n  primitiveString: \"\",\n  primitiveNumber: 0 as number,\n  primitiveBoolean: false,\n  // Type transformations\n  manualToDate: null as Date | null,\n  manualToString: \"\",\n  // Value transformations\n  valuesOnlyAToF: \"\",\n  valuesWithUnderscores: \"\",\n  valuesUppercase: \"\",\n};\ntype Form = typeof defaultValues;\n\nconst transformationSchema: TransformationSchema<Form> = {\n  disableDefaultTransformation: true,\n  fields: {\n    primitiveString: \"string\",\n    primitiveNumber: \"number\",\n    primitiveBoolean: \"boolean\",\n    manualToDate: value => new Date(Number(value)),\n    manualToString: value => String(value),\n    valuesOnlyAToF: value => String(value).replaceAll(/[^a-f]*/g, \"\"),\n    valuesWithUnderscores: value => String(value).replaceAll(/\\s/g, \"_\"),\n    valuesUppercase: value => String(value).toUpperCase(),\n  },\n};\n\nexport function ExampleValueTransformation() {\n  const [data, setData] = React.useState<Form>();\n\n  const { formProps, names } = useDumbForm<Form>({\n    name: \"example-value-transformation\",\n    mode: \"onChange\",\n    onSubmit: setData,\n    onChange: setData,\n    defaultValues,\n    transformationSchema,\n  });\n\n  return (\n    <form {...formProps}>\n      <FormGroupTitle>Primitive transformations</FormGroupTitle>\n      <FormTextInput label=\"Primitive: string\" type=\"number\" name={names.primitiveString} small />\n      <FormTextInput label=\"Primitive: number\" name={names.primitiveNumber} small />\n      <FormTextInput label=\"Primitive: boolean\" name={names.primitiveBoolean} small />\n\n      <Separator small dashed />\n\n      <FormGroupTitle>Transform types manually</FormGroupTitle>\n      <FormTextInput label=\"Manual: to date\" type=\"number\" name={names.manualToDate} small />\n      <FormTextInput label=\"Manual: to string\" type=\"number\" name={names.manualToString} small />\n\n      <Separator small dashed />\n\n      <FormGroupTitle>Transform values</FormGroupTitle>\n      <FormTextInput label=\"Values: Only allow [a-f] characters\" name={names.valuesOnlyAToF} small />\n      <FormTextInput label=\"Values: Replace spaces with underscores\" name={names.valuesWithUnderscores} small />\n      <FormTextInput label=\"Values: Uppercase\" name={names.valuesUppercase} small />\n    </form>\n  );\n}\n"},"__N_SSG":true}