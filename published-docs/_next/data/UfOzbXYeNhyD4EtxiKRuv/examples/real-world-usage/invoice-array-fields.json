{"pageProps":{"sourceCode":"// THIS CODE IS TEMPORARY, BEFORE FIELD ARRAY IS IMPLEMENTED\n\nimport React, { useEffect, useLayoutEffect, useState } from \"react\";\nimport { useDumbForm, ValidationError, ValidationSchema } from \"react-dumb-form\";\n\n// UI for documentation only\nimport { Button, Form, Stack, Table } from \"react-bootstrap\";\nimport { FormTextInput, FormGroup, FormGroupTitle, FormSelect, FormCheckbox } from \"ui/forms\";\nimport { Icon } from \"@iconify/react\";\nimport Separator from \"ui/Separator\";\n\n// MOCK DATA & FORM SETUP\n// --------------------------------------------------------------------------------\n\n// Mock data (in a real-world scenario this should come from a backend API)\nenum Types {\n  Service = \"service\",\n  Goods = \"goods\",\n}\nconst TYPES = [\n  { value: Types.Service, label: \"Service\" },\n  { value: Types.Goods, label: \"Goods\" },\n];\n\n// Mock data (in a real-world scenario this should come from a backend API)\nenum Units {\n  Hours = \"hours\",\n  Pieces = \"pieces\",\n}\nconst UNITS = [\n  { value: Units.Hours, label: \"hrs\" },\n  { value: Units.Pieces, label: \"pcs\" },\n];\n\nconst defaultValues = {\n  isActive: true,\n  title: \"\",\n  type: \"\" as Types,\n  price: 0,\n  quantity: 0,\n  unit: \"\" as Units,\n};\ntype Form = typeof defaultValues;\n\n// VALIDATION\n// --------------------------------------------------------------------------------\n\nfunction validateNumMinZero(number: number) {\n  if (number < 0) throw new ValidationError(\"Number must be greater than 0.\");\n}\n\nconst validationSchema: ValidationSchema<Form> = {\n  required: { fields: [\"type\", \"price\", \"quantity\", \"unit\"] },\n\n  validators: {\n    price: validateNumMinZero,\n    quantity: validateNumMinZero,\n    title: title => {\n      if (title.length < 10) throw new ValidationError(\"Title must be at least 10 characters long.\");\n    },\n  },\n};\n\n// LINE FIELDS COMPONENT WITH FORM\n// --------------------------------------------------------------------------------\n\ninterface InvoiceLineFormProps {\n  index: number;\n  data: Form;\n  setData: (data: Form) => void;\n  handleRemoveLine: VoidFunction;\n}\n\nexport function InvoiceLineForm({ index, data, setData, handleRemoveLine }: InvoiceLineFormProps) {\n  const { formProps, names, errorData, setValues } = useDumbForm<Form>({\n    name: `example-invoice-array-fields-form-${index}`,\n    mode: \"onBlurUnlessError\",\n    onSubmit: setData,\n    onChange: setData,\n    defaultValues: { ...defaultValues, ...data },\n    validationSchema,\n    liveFields: [\"isActive\", \"quantity\", \"price\"],\n  });\n\n  const { errors } = errorData;\n  const { isActive } = data;\n\n  // Automatically set quantity unit when switching between goods and services\n  useEffect(() => {\n    if (data.type === Types.Service) {\n      setValues({ unit: Units.Hours });\n    }\n    if (data.type === Types.Goods) {\n      setValues({ unit: Units.Pieces });\n    }\n  }, [data.type]);\n\n  // Calculate new formatted line total\n  const [sumTotal, setSumTotal] = React.useState<string | null>(null);\n  useLayoutEffect(() => {\n    const naiveTotal = data.price * data.quantity;\n    setSumTotal(`${Number(Number.isNaN(naiveTotal) ? 0 : naiveTotal).toFixed(2)} €`);\n  }, [data.price, data.quantity]);\n\n  return (\n    <>\n      <form {...formProps}>\n        <Stack direction=\"horizontal\" className=\"align-items-center\">\n          <div className=\"mt-3 me-2\">\n            <FormCheckbox type=\"switch\" name={names.isActive} />\n          </div>\n\n          <FormGroup layout={[7, 5]}>\n            <FormGroup layout={[8, 4]}>\n              <FormTextInput label=\"Title\" small disabled={!isActive} name={names.title} error={errors.title} />\n              <FormSelect\n                options={TYPES}\n                label=\"Type\"\n                small\n                disabled={!isActive}\n                name={names.type}\n                error={errors.type}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <FormTextInput\n                label=\"Quantity\"\n                small\n                disabled={!isActive}\n                type=\"number\"\n                name={names.quantity}\n                error={errors.quantity}\n              />\n              <FormSelect\n                options={UNITS}\n                label=\"Unit\"\n                small\n                disabled={!isActive}\n                name={names.unit}\n                error={errors.unit}\n              />\n              <FormTextInput label=\"Price\" small disabled={!isActive} name={names.price} error={errors.price} />\n            </FormGroup>\n          </FormGroup>\n        </Stack>\n\n        <Stack direction=\"horizontal\" className=\"align-items-center justify-content-end\">\n          <small className=\"me-3\" style={{ textDecorationLine: isActive ? \"none\" : \"line-through\" }}>\n            <strong>Line total: </strong>\n            <span className=\"text-muted\">{sumTotal}</span>\n          </small>\n          <Button variant=\"outline-danger\" size=\"sm\" onClick={handleRemoveLine}>\n            <Icon icon=\"tabler:trash\" className=\"me-1\" />\n            Remove\n          </Button>\n        </Stack>\n      </form>\n    </>\n  );\n}\n\n// MAIN COMPONENT (WRAPPER)\n// --------------------------------------------------------------------------------\n\nexport function ExampleInvoiceArrayFields() {\n  // Imagine this coming from an API endpoint to populate initial state\n  const [data, setData] = useState<Form[]>([\n    {\n      isActive: true,\n      title: \"iPhone 13, 128GB, Blue\",\n      type: Types.Goods,\n      quantity: 2,\n      unit: Units.Pieces,\n      price: 899,\n    },\n    {\n      isActive: false,\n      title: \"Extended warranty (36 months)\",\n      type: Types.Service,\n      quantity: 2,\n      unit: Units.Pieces,\n      price: 99,\n    },\n  ]);\n  const [total, setTotal] = useState(\"\");\n  const [wasSubmitted, setWasSubmitted] = useState(false);\n\n  useEffect(() => {\n    const total = data.reduce((total, line) => (line.isActive ? line.price * line.quantity + total : total), 0);\n    setTotal(Number.isNaN(total) ? \"-\" : total.toFixed(2) + \" €\");\n  }, [data]);\n\n  const handleSetData = (index: number, dataToSet: Form) => {\n    setData(data => {\n      const newData = [...data];\n      newData[index] = dataToSet;\n      return newData;\n    });\n  };\n\n  const handleAddLine = () => {\n    setData(data => [...data, defaultValues]);\n  };\n\n  const handleRemoveLine = (index: number) => {\n    setData(data => {\n      const newData = [...data];\n      newData.splice(index, 1);\n      return newData;\n    });\n  };\n\n  const handleInvoiceSubmitToggle = () => setWasSubmitted(!wasSubmitted);\n\n  return (\n    <>\n      <FormGroupTitle>Invoice details</FormGroupTitle>\n\n      <Separator small />\n\n      {wasSubmitted ? (\n        <Table striped className=\"mb-4\">\n          <thead>\n            <tr>\n              <th>\n                <small>Title</small>\n              </th>\n              <th>\n                <small>Type</small>\n              </th>\n              <th>\n                <small>Quantity</small>\n              </th>\n              <th>\n                <small>Price</small>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {data.map((line, index) => (\n              <tr key={index} style={{ textDecorationLine: line.isActive ? \"none\" : \"line-through\" }}>\n                <td>\n                  <small className=\"fw-bold\">\n                    {line.title || <span className=\"text-muted\">No description provided.</span>}\n                  </small>\n                </td>\n                <td>\n                  <small>{TYPES.find(type => type.value === line.type)?.label ?? \"-\"}</small>\n                </td>\n                <td>\n                  <small>\n                    {line.quantity} {line.unit}\n                  </small>\n                </td>\n                <td>\n                  <small>{line.price.toFixed(2)} €</small>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      ) : (\n        <div>\n          {/* TODO: Not the nicest hack using `key` to force re-render when length changes. Implement a better solution. */}\n          {data.map((line, index) => (\n            <React.Fragment key={`${index}-${data.length}`}>\n              <InvoiceLineForm\n                index={index}\n                data={line}\n                setData={data => handleSetData(index, data)}\n                handleRemoveLine={() => handleRemoveLine(index)}\n              />\n              <Separator dashed small />\n            </React.Fragment>\n          ))}\n          <div className=\"text-center\">\n            <Button variant=\"outline-primary\" size=\"sm\" onClick={handleAddLine} disabled={wasSubmitted}>\n              <Icon icon=\"material-symbols:add-circle-outline-rounded\" className=\"me-1\" />\n              Add invoice line\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {!wasSubmitted && <Separator small />}\n\n      <div>\n        <Stack direction=\"horizontal\">\n          <Stack direction=\"horizontal\" className=\"ms-auto\">\n            <div className=\"me-3\">\n              <strong>Invoice total: </strong>\n              <span className=\"text-muted fw-bold\">{total}</span>\n            </div>\n            <Button size=\"sm\" onClick={handleInvoiceSubmitToggle}>\n              {wasSubmitted ? (\n                <>\n                  <Icon icon=\"mdi:pencil\" className=\"me-1\" />\n                  Edit lines\n                </>\n              ) : (\n                <>\n                  <Icon icon=\"material-symbols:check-circle-outline-rounded\" className=\"me-1\" />\n                  Finish invoice\n                </>\n              )}\n            </Button>\n          </Stack>\n        </Stack>\n      </div>\n    </>\n  );\n}\n"},"__N_SSG":true}