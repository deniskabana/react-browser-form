{"pageProps":{"sourceCode":"import React from \"react\";\nimport { useDumbForm, ValidationError, ValidationSchema } from \"react-dumb-form\";\n\n// UI for documentation only\nimport { Button, Form, Stack } from \"react-bootstrap\";\nimport { FormTextInput, FormGroup, FormGroupTitle } from \"ui/forms\";\nimport Separator from \"ui/Separator\";\nimport { FormPassword } from \"ui/forms/FormPassword\";\nimport { Icon } from \"@iconify/react\";\n\n// FORM SETUP AND VALIDATION\n// --------------------------------------------------------------------------------\n\nconst defaultValues = {\n  firstName: \"\",\n  lastName: \"\",\n  username: \"\",\n  email: \"\",\n  password: \"\",\n  profilePhoto: \"\",\n};\ntype Form = typeof defaultValues;\n\nconst PASSWORD_FEEDBACK = {\n  minLength: false,\n  lowercaseChar: false,\n  uppercaseChar: false,\n  number: false,\n  specialSymbol: false,\n};\n\n// COMPONENT\n// --------------------------------------------------------------------------------\n\nexport function ExampleUserRegistration() {\n  const [data, setData] = React.useState(defaultValues);\n  const [isFileDraggedOver, setIsFileDraggedOver] = React.useState(false);\n  const [passwordFeedback, setPasswordFeedback] = React.useState({\n    ...PASSWORD_FEEDBACK,\n  });\n\n  const validationSchema: ValidationSchema<Form> = {\n    required: { fields: [\"firstName\", \"lastName\", \"username\", \"profilePhoto\"] },\n\n    validators: {\n      email: email => {\n        if (!email.match(/^\\S{2,}@\\S{2,}\\.\\S{2,}$/)) throw new ValidationError(\"Provide a valid e-mail address.\");\n      },\n\n      password: password => {\n        let shouldThrow = false;\n        const newPasswordFeedback: typeof PASSWORD_FEEDBACK = {\n          minLength: true,\n          lowercaseChar: true,\n          uppercaseChar: true,\n          number: true,\n          specialSymbol: true,\n        };\n\n        if (password.length < 6) {\n          shouldThrow = true;\n          newPasswordFeedback.minLength = false;\n        }\n        if (!password.match(/[a-z]/)) {\n          shouldThrow = true;\n          newPasswordFeedback.lowercaseChar = false;\n        }\n        if (!password.match(/[A-Z]/)) {\n          shouldThrow = true;\n          newPasswordFeedback.uppercaseChar = false;\n        }\n        if (!password.match(/[0-9]/)) {\n          shouldThrow = true;\n          newPasswordFeedback.number = false;\n        }\n        if (!password.match(/[!@#$%^&*()\\[\\]-_=+]/)) {\n          shouldThrow = true;\n          newPasswordFeedback.specialSymbol = false;\n        }\n\n        setPasswordFeedback(newPasswordFeedback);\n        // Message isn't important since it isn't displayed, but it might save time on future refactor\n        if (shouldThrow)\n          throw new ValidationError(\n            \"Password needs to be 6+ characters long and include 1 lowercase, 1 uppercase letter, 1 number and 1 symbol.\",\n          );\n      },\n    },\n  };\n\n  const { formProps, names, errorData, setValues } = useDumbForm<Form>({\n    name: \"example-user-registration-form\",\n    onSubmit: setData,\n    onChange: setData,\n    defaultValues,\n    validationSchema,\n    liveFields: [\"password\"],\n  });\n\n  const { errors } = errorData;\n\n  const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    setIsFileDraggedOver(false);\n    const file = event.dataTransfer.files[0];\n\n    if (!file) return;\n\n    setValues({ profilePhoto: file.name });\n    const previewNode = document.getElementById(\"profile-photo-preview\") as HTMLImageElement | undefined;\n    if (!previewNode) return;\n\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onloadend = () => {\n      const result = reader.result;\n      if (!result) return;\n      previewNode.src = result as any;\n      previewNode.alt = file.name;\n    };\n  };\n\n  const handleDragOver = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    setIsFileDraggedOver(true);\n  };\n  const handleDragLeave = () => setIsFileDraggedOver(false);\n\n  return (\n    <form {...formProps}>\n      <FormGroupTitle>Profile picture</FormGroupTitle>\n      <div>\n        <div\n          className=\"ms-auto me-auto my-4 d-flex text-center justify-content-center align-items-center\"\n          onDrop={handleDrop}\n          onDragOver={handleDragOver}\n          onDragLeave={handleDragLeave}\n          style={{\n            border: `3px dashed ${isFileDraggedOver ? \"#68f\" : \"#aaa\"}`,\n            borderRadius: \"50%\",\n            width: \"200px\",\n            height: \"200px\",\n          }}\n        >\n          <div>\n            {data.profilePhoto && data.profilePhoto.length ? (\n              <img\n                id=\"profile-photo-preview\"\n                className=\"ms-auto me-auto\"\n                style={{ maxWidth: \"80px\", maxHeight: \"80px\", background: \"#aaa\" }}\n              />\n            ) : (\n              <Icon icon=\"material-symbols:frame-person\" height=\"80px\" style={{ opacity: 0.3 }} />\n            )}\n            <div className=\"d-block text-muted mt-2\" style={{ fontSize: \"0.75em\" }}>\n              Drag and drop a file.\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Separator dashed small />\n\n      <FormGroupTitle>User details</FormGroupTitle>\n      <FormGroup>\n        <FormTextInput label=\"First name\" requiredMark name={names.firstName} error={errors.firstName} />\n        <FormTextInput label=\"Last name\" requiredMark name={names.lastName} error={errors.lastName} />\n      </FormGroup>\n      <FormGroup>\n        <FormTextInput label=\"Username\" requiredMark name={names.username} error={errors.username} />\n        <FormTextInput label=\"E-mail\" requiredMark name={names.email} error={errors.email} />\n      </FormGroup>\n\n      <Separator dashed small />\n\n      <FormGroupTitle>Create a password</FormGroupTitle>\n      <FormPassword label=\"Password\" requiredMark name={names.password} />\n      <Form.Text style={{ fontSize: \"0.75em\" }}>\n        Password feedback:\n        <div className=\"fw-bold ps-3\">\n          <div className={passwordFeedback.minLength ? \"text-success\" : \"text-danger\"}>\n            <Icon\n              icon={passwordFeedback.minLength ? \"material-symbols:check\" : \"charm:cross\"}\n              height=\"22\"\n              className=\"me-1 align-middle\"\n            />\n            Needs to be at least 6 characters long\n          </div>\n          <div className={passwordFeedback.lowercaseChar ? \"text-success\" : \"text-danger\"}>\n            <Icon\n              icon={passwordFeedback.lowercaseChar ? \"material-symbols:check\" : \"charm:cross\"}\n              height=\"22\"\n              className=\"me-1 align-middle\"\n            />\n            Needs at least 1 lowercase letter\n          </div>\n          <div className={passwordFeedback.uppercaseChar ? \"text-success\" : \"text-danger\"}>\n            <Icon\n              icon={passwordFeedback.uppercaseChar ? \"material-symbols:check\" : \"charm:cross\"}\n              height=\"22\"\n              className=\"me-1 align-middle\"\n            />\n            Needs at least 1 uppercase letter\n          </div>\n          <div className={passwordFeedback.number ? \"text-success\" : \"text-danger\"}>\n            <Icon\n              icon={passwordFeedback.number ? \"material-symbols:check\" : \"charm:cross\"}\n              height=\"22\"\n              className=\"me-1 align-middle\"\n            />\n            Needs at least 1 number\n          </div>\n          <div className={passwordFeedback.specialSymbol ? \"text-success\" : \"text-danger\"}>\n            <Icon\n              icon={passwordFeedback.specialSymbol ? \"material-symbols:check\" : \"charm:cross\"}\n              height=\"22\"\n              className=\"me-1 align-middle\"\n            />\n            Needs at least 1 special symbol\n          </div>\n        </div>\n      </Form.Text>\n\n      <Separator dashed small />\n\n      <Stack direction=\"horizontal\" className=\"justify-content-end\">\n        <Button type=\"submit\" disabled={errorData.count > 0}>\n          Register\n        </Button>\n      </Stack>\n    </form>\n  );\n}\n"},"__N_SSG":true}