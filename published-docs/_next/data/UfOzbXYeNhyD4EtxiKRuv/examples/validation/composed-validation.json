{"pageProps":{"sourceCode":"import React from \"react\";\nimport { useDumbForm, ValidationError, ValidationSchema } from \"react-dumb-form\";\n\n// UI for documentation only\nimport { Button, Stack } from \"react-bootstrap\";\nimport { FormGroup, FormGroupTitle, FormTextarea, FormTextInput } from \"ui/forms\";\n\n// FORM SETUP\n// --------------------------------------------------------------------------------\n\nconst defaultValues = {\n  firstName: \"\",\n  lastName: \"\",\n  jobTitle: \"\",\n  jobDescription: \"\",\n};\ntype Form = typeof defaultValues;\n\n// VALIDATION\n// --------------------------------------------------------------------------------\n\nfunction validateLengthRange(stringField: string) {\n  if (stringField.length < 6) throw new ValidationError(\"Value must be at least 6 characters long.\");\n  if (stringField.length > 12) throw new ValidationError(\"Value must not be longer than 12 characters.\");\n}\nfunction validateNoSpaces(stringField: string) {\n  if (stringField.match(/\\s/)) throw new ValidationError(\"Can not contain spaces.\");\n}\n\nconst validationSchema: ValidationSchema<Form> = {\n  validators: {\n    firstName: [validateLengthRange, validateNoSpaces],\n    lastName: [validateLengthRange, validateNoSpaces],\n    jobTitle: validateLengthRange,\n  },\n};\n\n// COMPONENT\n// --------------------------------------------------------------------------------\n\nexport function ExampleComposedValidation() {\n  const [data, setData] = React.useState<Form>();\n\n  const { formProps, names, errorData } = useDumbForm<Form>({\n    name: \"example-composed-validation-form\",\n    defaultValues,\n    onSubmit: setData,\n    validationSchema,\n  });\n\n  const { errors } = errorData;\n\n  return (\n    <form {...formProps}>\n      <FormGroupTitle>Submit an application</FormGroupTitle>\n      <FormGroup>\n        <FormTextInput label=\"First name (6-12 chars)\" requiredMark name={names.firstName} error={errors.firstName} />\n        <FormTextInput label=\"Last name (6-12 chars)\" requiredMark name={names.lastName} error={errors.lastName} />\n      </FormGroup>\n      <FormTextInput label=\"Job title (6-12 chars)\" requiredMark name={names.jobTitle} error={errors.jobTitle} />\n\n      <FormTextarea label=\"Job description (not validated)\" name={names.jobDescription} />\n\n      <Stack direction=\"horizontal\" className=\"justify-content-end\">\n        <Button type=\"submit\" disabled={errorData.count > 0}>\n          Submit\n        </Button>\n      </Stack>\n    </form>\n  );\n}\n"},"__N_SSG":true}