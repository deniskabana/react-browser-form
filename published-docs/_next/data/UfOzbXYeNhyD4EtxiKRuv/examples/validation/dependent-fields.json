{"pageProps":{"sourceCode":"import React from \"react\";\nimport { useDumbForm, ValidationError, ValidationSchema } from \"react-dumb-form\";\n\n// UI for documentation only\nimport { Button, Form, Stack } from \"react-bootstrap\";\nimport { FormCheckbox, FormGroupTitle, FormTextInput } from \"ui/forms\";\nimport Separator from \"ui/Separator\";\n\n// FORM SETUP AND VALIDATION\n// --------------------------------------------------------------------------------\n\nconst defaultValues = {\n  shouldValidateFirst: false,\n  firstInput: \"\",\n  age: 18,\n  legalGuardianName: \"\",\n};\ntype Form = typeof defaultValues;\n\nconst validationSchema: ValidationSchema<Form> = {\n  required: { fields: [\"age\"] },\n\n  validators: {\n    firstInput: (firstInput, data) => {\n      if (!data.shouldValidateFirst) return;\n      if (firstInput.length < 6) throw new ValidationError(\"Please put in 6 or more characters\");\n    },\n\n    legalGuardianName: (legalGuardianName, data) => {\n      if (!data.age || data.age >= 18) return;\n      if (legalGuardianName.length < 6) throw new ValidationError(\"Please put in 6 or more characters\");\n    },\n  },\n};\n\n// COMPONENT\n// --------------------------------------------------------------------------------\n\nexport function ExampleDependentFields() {\n  const [data, setData] = React.useState<Form>(defaultValues);\n\n  const { formProps, names, errorData } = useDumbForm<Form>({\n    name: \"example-dependent-fields-form\",\n    defaultValues,\n    onSubmit: setData,\n    onChange: setData, // Used because of reset button\n    validationSchema,\n    liveFields: [\"age\", \"shouldValidateFirst\"],\n  });\n\n  const { errors, count } = errorData;\n\n  return (\n    <form {...formProps}>\n      <FormGroupTitle>Conditional validation</FormGroupTitle>\n      <FormCheckbox label=\"Validate the next input?\" name={names.shouldValidateFirst} />\n      <FormTextInput\n        label=\"Put in at least 6 characters\"\n        disabled={!data?.shouldValidateFirst}\n        name={names.firstInput}\n        error={errors.firstInput}\n      />\n\n      <Separator dashed />\n\n      <FormGroupTitle>Conditional fields</FormGroupTitle>\n      <Form.Text>If age below 18 is provided, legal guardian info is required and shown.</Form.Text>\n      <FormTextInput label=\"Age\" type=\"number\" name={names.age} error={errors.age} />\n      {data.age && data.age < 18 ? (\n        <FormTextInput\n          label=\"Legal guardian name (6+ characters)\"\n          name={names.legalGuardianName}\n          error={errors.legalGuardianName}\n        />\n      ) : null}\n\n      <Stack direction=\"horizontal\" className=\"justify-content-end\">\n        <Button type=\"reset\" variant=\"outline-danger\" className=\"me-1\" size=\"sm\">\n          Clear\n        </Button>\n        <Button type=\"submit\" size=\"sm\">\n          Submit\n        </Button>\n      </Stack>\n    </form>\n  );\n}\n"},"__N_SSG":true}